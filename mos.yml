mos author: Cristian Valdivia <info@ioled.cl>
description: iOLED Firmware (+Change in library for DS3231)
version: 2.2.1
manifest_version: 2017-09-29
libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

platforms: [esp32, esp8266]

config_schema:
  - ['esp', 'o', {title: 'iOLED esp settings'}]
  # Button control
  - ['esp.btn1.pin', 'i', 0, {title: 'Button pin for AP'}]

  # AP activate
  - ['esp.ap.state', 'b', false, {title: 'AP state'}]

  # Integrated led (led0)
  - ['esp.led0.pin', 'i', 2, {title: 'Integrated led'}]

  # led1 config
  - ['esp.led1.active_high', 'b', false, {title: 'True if LED is on when output is high (1)'}]
  - ['esp.led1.duty', 'd', 1.0, {title: 'Signal 1 LED duty cycle'}]
  - ['esp.led1.freq', 'i', 10000, {title: 'LED frequency'}]
  - ['esp.led1.pin', 'i', 14, {title: 'Led pin for PWM'}]
  - ['esp.led1.state', 'b', true, {title: 'Integrated Led current state'}]

  # led2 config
  - ['esp.led2.active_high', 'b', false, {title: 'True if LED is on when output is high (1)'}]
  - ['esp.led2.duty', 'd', 1.0, {title: 'Signal 2 LED duty cycle'}]
  - ['esp.led2.freq', 'i', 10000, {title: 'LED frequency'}]
  - ['esp.led2.pin', 'i', 12, {title: 'Led pin for PWM'}]
  - ['esp.led2.state', 'b', true, {title: 'Integrated Led current state'}]

  # Neopixel config
  - ['esp.neopixel.state', 'b', true, {title: 'Led current state'}]
  - ['esp.neopixel.pin', 'i', 15, {title: 'Neopixel pin'}]
  - ['esp.neopixel.pixels', 'i', 2, {title: 'Neopixel number of pixels'}]

  # Timer
  - ['esp.timer.timerOn', 's', '00:00', {title: 'Turn on time'}]
  - ['esp.timer.timerOff', 's', '00:00', {title: 'Turn off time'}]
  - ['esp.timer.timerState', 'b', false, {title: 'Timer state'}]

  # Time zone
  - ['sys.tz_spec', 's', 'CLST3', {title: 'Chile Summer Timer'}]

  # Enable I2C
  - ['i2c.enable', 'b', true, {title: 'Enable I2C'}]
  - ['i2c.freq', 'i', 100000, {title: 'I2C bus speed'}]
  - ['i2c.unit_no', 'i', 0, {title: 'Which hardware unit ot use, 0 or 1'}]

  # Config for mDash
  - ['dash.enable', 'b', false, {'title': 'Enable'}]
  - ['dash.token', 's', '', {'title': 'Access token'}]
  - ['dash.server', 's', 'wss://mdash.net/api/v2/rpc', {'title': 'Server address'}]
  - ['dash.ssl_cert', 's', '', {title: 'Client certificate to present to the server'}]
  - ['dash.ssl_key', 's', '', {title: 'Private key corresponding to the certificate'}]
  - ['dash.ssl_ca_cert', 's', 'ca.pem', {'title': 'Verify server certificate using this CA bundle'}]
  - ['dash.send_logs', 'b', false, {'title': 'Send logs'}]

  # Enable access point
  - ['wifi.ap.enable', 'b', false, {title: 'Disable Access Point'}]
  - ['wifi.ap.ssid', 's', 'iOLED_AP', {title: 'Access Point Name'}]
  - ['wifi.ap.pass', 's', '', {title: 'Access Point Password'}]

filesystem:
  - fs

libs:
  # boards include wifi lib.
  # - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/mjs
  - origin: https://github.com/mongoose-os-libs/pwm
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/rpc-common
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-loopback
  - origin: https://github.com/mongoose-os-libs/rpc-service-i2c

  # gcp include mqtt and ca-bundle (certificates).
  - origin: https://github.com/mongoose-os-libs/gcp

  # Access point for wifi
  - origin: https://github.com/mongoose-os-libs/http-server

  # Neopixel lib
  - origin: https://github.com/mongoose-os-libs/neopixel

  # CRON
  - origin: https://github.com/mongoose-os-libs/cron

  # I2C
  - origin: https://github.com/mongoose-os-libs/i2c

  # mDash
  - origin: https://github.com/mongoose-os-libs/dash
  - origin: https://github.com/mongoose-os-libs/rpc-service-ota

  # DS3231
  - origin: https://github.com/mongoose-os-libs/ds3231

conds:
  - when: mos.platform == "esp32"
    apply:
      config_schema:
        - ['i2c.sda_gpio', 'i', 32, {title: 'GPIO to use for SDA'}]
        - ['i2c.scl_gpio', 'i', 33, {title: 'GPIO to use for SCL'}]
        - ['esp.led0.state', 'b', true, {title: 'Integrated Led state'}]

  - when: mos.platform == "esp8266"
    apply:
      config_schema:
        - ['i2c.sda_gpio', 'i', 5, {title: 'GPIO to use for SDA'}]
        - ['i2c.scl_gpio', 'i', 4, {title: 'GPIO to use for SCL'}]
        - ['esp.led0.state', 'b', false, {title: 'Integrated Led state'}]
